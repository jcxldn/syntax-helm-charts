---
apiVersion: batch/v1
kind: Job
metadata:
  name: generate-app-key
  labels:
    job: generate-app-key
  annotations:
    # "helm.sh/hook": pre-install, pre-upgrade
    # "helm.sh/hook-weight": "-5"
    # "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  template:
    spec:
      serviceAccountName: laravel-key-generator-sa
      restartPolicy: OnFailure
      {{- with .Values.podSecurityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
      - name: shared-data
        emptyDir: {}
      initContainers:
      - name: php-key-generator
        {{- with .Values.securityContext }}
        securityContext:
          {{- toYaml . | nindent 12 }}
        {{- end }}
        image: "{{ .Values.snipeit.image.repository }}:{{ .Values.snipeit.image.tag | default .Chart.AppVersion }}"
        command: ["sh", "-c"]
        args:
          - |
            #!/bin/sh
            set -e
            echo "Generate key"
            php artisan key:generate --show > /shared-data/app-key
            echo "Generated"
        volumeMounts:
        - name: shared-data
          mountPath: /shared-data
      containers:
      - name: kubectl-secret-creator
        image: docker.io/bitnami/kubectl:latest
        {{- with .Values.securityContext }}
        securityContext:
          {{- toYaml . | nindent 12 }}
        {{- end }}
        command: ["sh", "-c"]
        args:
          - |
            #!/bin/sh
            set -e
            SECRET_NAME="{{ .Values.snipeit.config.appKey.name }}"
            APP_KEY=$(cat /shared-data/app-key)

            echo "Check if secret exists"
            if kubectl get secret $SECRET_NAME >/dev/null 2>&1; then
              echo "Secret exists"
              exit 0
            fi

            echo "Create secret..."
            kubectl create secret generic $SECRET_NAME --from-literal=APP_KEY="$APP_KEY"
            echo "Secret created"

        volumeMounts:
        - name: shared-data
          mountPath: /shared-data